using System;
using System.Collections.Generic;
using System.Linq;
using ContC.Extension.EA.domain.entities.DTO;
using ContC.Extension.EA.domain.entities.Models;
using Repository.Pattern.Repositories;

namespace ContC.Extension.EA.domain.repositories
{
    public static class ApontamentoRepository
    {

        public static IList<Apontamento> ObterApontamentosPorUsuarioEmpresaCompetencia(
            this IRepository<Apontamento> repository, Usuario usuario, Empresa empresa,
            Competencia competencia)
        {
            return repository.Query(
                a => a.Empresa.Id == empresa.Id && a.Usuario.Id == usuario.Id && a.Competencia.Id == competencia.Id)
                .Select().ToList();
        }

        public static IList<ApontamentoDTO> ObterApontamentosDTOPorUsuarioEmpresaCompetencia(
            this IRepository<Apontamento> repository, Usuario usuario, Empresa empresa,
            Competencia competencia)
        {
            var apontamentos = repository.Query(
                a => a.Empresa.Id == empresa.Id && a.Usuario.Id == usuario.Id && a.Competencia.Id == competencia.Id)
                .Select().ToList();
            return apontamentos.Select(s => new ApontamentoDTO
            {
                Id = s.Id,
                Competencia = s.Competencia.MesAno,
                Localidade = s.Localidade.Sigla,
                Aprovado = s.Status,
                CentroDeCusto = s.CentroDeCusto.Sigla,
                Categoria = s.Categoria.Descricao,
                Empresa = s.Empresa.RazaoSocial,
                Hh = s.Hh,
                DataApropriacao = s.Data,
<<<<<<< HEAD
                DescricaoAtividade = s.Descricao
            }).OrderByDescending(o => o.DataApropriacao).ToList();
=======
                DescricaoAtividade = s.Descricao,
                StatusAprovacao = s.StatusAprovacao
            }).OrderByDescending(o => o.DataApropriacao ).ToList();
>>>>>>> ca0afa28c169a67e2bfe7c6060881974d8b347c0
        }

        public static Apontamento ObterApropriacaoDiariaPorPropriedadesChave(this IRepository<Apontamento> repository,
            Usuario usuario, Empresa empresa, Competencia competencia, Localidade localidade,
            CentroDeCusto centroDeCusto, Categoria categoria, DateTime dataApropriacao)
        {
            //Obtem um registro de apontamento por Usuario, Empresa, Competencia, Localidade, Centro de Custo, Categoria e Data de Apropriacao
            var apontamento =
                repository.Query(
                    a =>
                        a.Usuario.Id == usuario.Id && a.Empresa.Id == empresa.Id && a.Competencia.Id == competencia.Id &&
                        a.Localidade.Id == localidade.Id && a.CentroDeCusto.Id == centroDeCusto.Id &&
                        a.Categoria.Id == categoria.Id && a.Data == dataApropriacao).Select().FirstOrDefault(s=> s.StatusAprovacao != "APROVADO" && s.StatusAprovacao != "REJEITADO");
            return apontamento;
        }

        public static decimal ObterTotalDiarioDeHorasApropriadas(this IRepository<Apontamento> repository,
            Usuario usuario, Empresa empresa, DateTime dataApropriacao)
        {
            //Sumariza por Usuario, Empresa e Data a quantidade diária de horas apropriadas
            //(a.DataAprovacao == null && a.Status == false) => "NENHUMA AÇÃO REALIZADA" OU
            //(a.DataAprovacao != null && a.Status == true) => "APROVADO"
            decimal retorno = 0;
            var apontamentoDiarioSummarizado =
                repository.Query(
                    a =>
                        a.Usuario.Id == usuario.Id && a.Empresa.Id == empresa.Id && a.Data == dataApropriacao && ((a.DataAprovacao == null && a.Status == false) || (a.DataAprovacao != null && a.Status == true)))
                    .Select()
                    .GroupBy(x => new { UsuarioId = x.Usuario.Id, EmpresaId = x.Empresa.Id, DataApropriacao = x.Data })
                    .Select(
                        g =>
                            new
                            {
                                g.Key.UsuarioId,
                                g.Key.EmpresaId,
                                g.Key.DataApropriacao,
                                TotalDiario = g.Sum(s => s.Hh)
                            }).FirstOrDefault();
            if (apontamentoDiarioSummarizado != null)
                retorno = apontamentoDiarioSummarizado.TotalDiario;

            return retorno;

        }

        public static IList<AprovacaoDTO> ObterApontamentosAprovacaoPorLider(this IRepository<Apontamento> repository, Usuario lider)
        {

            var apontamentos = repository.Query(
                a => a.Lider.Id == lider.Id && !a.Status && !a.DataAprovacao.HasValue)
                .Select().ToList();
            return apontamentos.Select(s => new AprovacaoDTO
            {
                Id = s.Id,
                Localidade = s.Localidade.Sigla,
                Profissional = s.Usuario.Nome,
                CentroDeCusto = s.CentroDeCusto.Sigla,
                Empresa = s.Empresa.RazaoSocial,
                Hh = s.Hh,
                DataApropriacao = s.DataRegistro,
                DataAprovacao = s.DataAprovacao
            }).OrderByDescending(o => o.DataApropriacao).ToList();

        }

        public static IList<AprovacaoDTO> ObterApontamentosAprovacaoPorLider(this IRepository<Apontamento> repository, Usuario lider, Usuario profissional)
        {

            var apontamentos = repository.Query(
                a => a.Lider.Id == lider.Id && a.Status && a.DataAprovacao.HasValue && a.Usuario.Id == profissional.Id)
                .Select().ToList();
            return apontamentos.Select(s => new AprovacaoDTO
            {
                Id = s.Id,
                Localidade = s.Localidade.Sigla,
                Profissional = s.Usuario.Nome,
                CentroDeCusto = s.CentroDeCusto.Sigla,
                Empresa = s.Empresa.RazaoSocial,
                Hh = s.Hh,
                DataApropriacao = s.DataRegistro,
                DataAprovacao = s.DataAprovacao
            }).OrderByDescending(o => o.DataApropriacao).ToList();

        }

        public static IList<AprovacaoDTO> ObterApontamentosDesaprovadoPorLider(this IRepository<Apontamento> repository, Usuario lider)
        {

            var apontamentos = repository.Query(
                a => a.Lider.Id == lider.Id && !a.Status && a.DataAprovacao.HasValue)
                .Select().ToList();
            return apontamentos.Select(s => new AprovacaoDTO
            {
                Id = s.Id,
                Localidade = s.Localidade.Sigla,
                Profissional = s.Usuario.Nome,
                CentroDeCusto = s.CentroDeCusto.Sigla,
                Empresa = s.Empresa.RazaoSocial,
                Hh = s.Hh,
                DataApropriacao = s.DataRegistro,
                DataAprovacao = s.DataAprovacao
            }).OrderByDescending(o => o.DataApropriacao).ToList();

        }

        public static IList<Usuario> ObterProfissionaisApontamentosPorLider(this IRepository<Apontamento> repository, Usuario lider)
        {
            var usuarios = repository.Query(
                a => a.Lider.Id == lider.Id && a.Status && a.DataAprovacao.HasValue)
                .Select(s => s.Usuario).Distinct();
            return usuarios.OrderBy(o => o.Nome).ToList();
        }
    }
}